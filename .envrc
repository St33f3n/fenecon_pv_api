#!/usr/bin/env bash
# .envrc - Optimierte direnv Konfiguration mit nix-direnv


watch_file flake.nix
watch_file flake.lock
watch_file Cargo.toml
watch_file Cargo.lock

use flake

if [ -f .env ]; then
  dotenv .env
fi

# SOPS-verschlüsselte Secrets laden
if [ -f secrets/secrets.env ]; then
  if command -v sops >/dev/null 2>&1; then
    log_status "Loading encrypted secrets via sops..."
    # Entschlüsseln und in Environment laden
    eval "$(sops -d secrets/secrets.env 2>/dev/null)" || log_error "Failed to decrypt secrets"
  else
    log_error "sops not found but secrets/secrets.env exists"
    log_status "Install sops or add it to your flake.nix"
  fi
fi


# Custom layout für deine bestehende Rust-Konfiguration
layout_rust_enhanced() {
  # Verwende die layout_rust Funktion aus deiner shell.nix
  if [[ ! -f Cargo.toml ]]; then
    log_error "No Cargo.toml found"
    exit 1
  fi
  
  # Cargo bin directories
  PATH_add "$HOME/.cargo/bin"
  PATH_add "target/debug"
  PATH_add "target/release"
  
  # Rust environment
  export RUST_BACKTRACE="${RUST_BACKTRACE:-1}"
  export RUST_LOG="${RUST_LOG:-debug}"
  
  # Sccache für schnellere Builds wenn verfügbar
  if has sccache; then
    log_status "Using sccache for faster builds"
  fi
  
  
  # Projekt-spezifische Aliases
  alias cb="cargo build"
  alias cr="cargo run"
  alias ct="cargo test"
  alias cc="cargo check"
  alias cw="cargo watch -x run"
  alias cwt="cargo watch -x 'nextest run'"
}

layout_rust_enhanced

# Performance-Monitoring (optional)
if [ -n "$DIRENV_DEBUG" ]; then
  log_status "Environment loaded in ${DIRENV_DIFF_SECONDS}s"
fi

# Success message
echo "✅ Rust development environment ready!"
echo "   Run 'nix develop' for manual shell or let direnv handle it automatically"

#nu -e "sops -d secrets/secrets.json | from json | load-env"


